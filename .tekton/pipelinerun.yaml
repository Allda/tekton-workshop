---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  name: ci-cd-pipeline-pac-demo
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the tasks from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "[git-clone, black, pylint, yaml-lint, buildah]"

    # You can add more tasks by increasing the suffix number, you can specify
    # them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # how many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      # Step 1: Clone the repository
      - name: git-clone
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)

      # Step 2: Run linting and static code analysis
      - name: black
        taskRef:
          name: black
        runAfter:
          - git-clone
        params:
          - name: args
            value: [".", "--check", "--diff"]
          - name: image
            value: python:3.12-slim
        workspaces:
          - name: shared-workspace
            workspace: source

      - name: yaml-lint
        taskRef:
          name: yaml-lint
        runAfter:
          - git-clone
        workspaces:
          - name: shared-workspace
            workspace: source
        params:
          - name: args
            value: ["."]

      - name: pylint
        taskRef:
          name: pylint
        runAfter:
          - git-clone
        workspaces:
          - name: source
            workspace: source
        params:
          - name: args
            value: ["."]

      # Unit tests are missing here. You can add them by following the same pattern
      # as the previous tasks.

      # Here is a place for you to add the unit tests task
      # __________________________________________________

      # __________________________________________________
      # Step 3: Build the container image
      - name: build
        taskRef:
          name: buildah
        runAfter:
          - pylint
          - black
          - yaml-lint
        params:
          - name: IMAGE
            value: "quay.io/user/myapp"
            # Try to enable push to any registry of your choice
            # and mount a secret for authentication if needed
            # For additional information, please refer to the official documentation
            # https://hub.tekton.dev/tekton/task/buildah
          - name: SKIP_PUSH
            value: "true"
        workspaces:
          - name: source
            workspace: source

  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
